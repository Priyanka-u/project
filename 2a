//2) a) Which part of the US has the most Data Engineer jobs for each year?
   import java.io.*;

import org.apache.hadoop.io.*;
import org.apache.hadoop.mapreduce.*;
import org.apache.hadoop.conf.*;
import org.apache.hadoop.fs.*;
import org.apache.hadoop.mapreduce.Reducer.Context;
import org.apache.hadoop.mapreduce.lib.input.*;
import org.apache.hadoop.mapreduce.lib.output.*;


public class myproject2a
  {
	public static class MapClass extends Mapper<LongWritable,Text,Text,Text>
     {
      public void map(LongWritable key, Text value, Context context)
        {	    	  
	         try
	          {
	            String[] str = value.toString().split("\t");	 
	                
	            if(str[1].contains("CERTIFIED") && str[4].contains("DATA ENGINEER"))
	            {  	String str1= str[4]+","+str[7];	            	
	            
	            context.write(new Text(str[8]),new Text (str1));
	            }
	         
	         }
	         catch(Exception e)
	         {
	            System.out.println(e.getMessage());
	         }
	         
	      }
	   }
   

public static class ReduceClass extends Reducer<Text,Text,Text,IntWritable>
{
	  	public void reduce(Text key, Iterable<Text> values,Context context) throws IOException, InterruptedException {
	      	int sum=0;
	      	
	      	 for (Text val : values)
	         {       
	      		 sum++;
	      		   	
	         }
	         		         		      		      
	     
		context.write(key,new IntWritable(count));
	      
	    }
}

public static void main(String[] args) throws Exception {
	    Configuration conf = new Configuration();
	    Job job = Job.getInstance(conf, "count");
	    job.setJarByClass(myproject2a.class);
	    job.setMapperClass(MapClass.class);
	    job.setReducerClass(ReduceClass.class);
	    job.setNumReduceTasks(1);
	    job.setMapOutputKeyClass(Text.class);
	    job.setMapOutputValueClass(Text.class);
	    job.setOutputKeyClass(Text.class);
	    job.setOutputValueClass(IntWritable.class);
	    FileInputFormat.addInputPath(job, new Path(args[0]));
	    FileOutputFormat.setOutputPath(job, new Path(args[1]));
	    System.exit(job.waitForCompletion(true) ? 0 : 1);
	  }
}
