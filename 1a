

import java.io.IOException;

import javax.imageio.IIOException;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Mapper.Context;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;

public class mypro1a
{
public static class MapClass extends Mapper<LongWritable,Text,Text,Text>
{
   public void map(LongWritable key, Text value, Context context)
   {             
      try{
         String[] str = value.toString().split("\t");     
         if(str[4].equals("DATA ENGINEER"))
         {
             context.write(new Text(str[7]),new Text (str[4]));
         }
     
      }
      catch(Exception e)
      {
         System.out.println(e.getMessage());
      }
     
   }
}
public static class ReduceClass extends Reducer<Text,Text,Text,IntWritable>
{
       public void reduce(Text key, Iterable<Text> values,Context context) throws InterruptedException, IOException {
           int sum=0;
          
            for (Text val : values)
          {      
                sum++;
                     
          }
                                                      
     
     context.write(key,new IntWritable(sum));
      
      
     }
}

public static void main(String[] args) throws Exception {
    Configuration conf = new Configuration();
        Job job = Job.getInstance(conf, "growth");
    job.setJarByClass(mypro1a.class);
    job.setMapperClass(MapClass.class);
    job.setReducerClass(ReduceClass.class);
    job.setNumReduceTasks(1);
    job.setMapOutputKeyClass(Text.class);
    job.setMapOutputValueClass(Text.class);
    job.setOutputKeyClass(Text.class);
    job.setOutputValueClass(IntWritable.class);
    FileInputFormat.addInputPath(job, new Path(args[0]));
    FileOutputFormat.setOutputPath(job, new Path(args[1]));
    System.exit(job.waitForCompletion(true) ? 0 : 1);
  }
}


	
	
	
	  
	
	





